## Combiflow pipeline: Aim of this analysis pipeline is to combine multi-parameter flow data to cluster cell based on their marker expression profiles en detect potential
## relapse-inducing cell populations during disease progression and remission in the context of hematological malignancies.
## Note: This is the first version of the Combiflow pipeline, it will be updated to automate certain processes that are currently performed manually. 
## A detailed protocol for data preparation and processing throughout the pipeline will follow. 


#clean working directory and R history
rm(list=ls())

#load packages
library(tidyverse)
library(ggplot2) 
library(dplyr)
library(plyr)
library(reshape2)
library(flowWorkspace)
library("RcppArmadillo")
library(mvtnorm)
library("flowCore")
library(Rtsne)
library('ggrepel')
library('grid')
library('RJSONIO')
library('XML')
library(readr)
library(magrittr)
library(ggrepel)
library(mclust)
library(fpc)
library(readxl)
library(FlowSOM)
library("limma")
library("RColorBrewer")
library("pheatmap")
library("umap")
library(matrixStats)
library(robustbase)
library("devtools")
library('igraph')
library('MASS')
library(emstreeR)
library("lme4")
library(multcomp)
library("CATALYST")
library(ggcyto)
library("ggpubr")
library("cowplot")
library("gridExtra")
library(purrr)
library("factoextra")
library("ggsci")
library("viridis")
library(ConsensusClusterPlus)
library("FactoMineR")




setwd("F:\\Combiflow\\test_DNR")

### Data import

metadata_filename <- "test_DNR_metadata.xlsx"

md <- read_excel(metadata_filename)

## Make sure condition variables are factors with the right levels
md$condition <- factor(md$condition, levels = c("Diagnosis","Relapse", "Healthy"))
head(md)

## Define colors for conditions
color_conditions <- c("#6A3D9A", "#FF7F00", "#008000", "purple", "black", "orange")
names(color_conditions) <- levels(md$condition)

fcs_filename <- "test - tSNE DNR.zip"

unzip(fcs_filename)



fcs_raw <- read.flowSet(md$file_name, transformation = FALSE, 
                        truncate_max_range = FALSE)
fcs_raw


panel_filename <- "test_DNR_panel.xlsx"
panel <- read_excel(panel_filename)
head(data.frame(panel))

fcs_raw
colnames(fcs_raw) = panel$Antigen[match(colnames(fcs_raw), panel$fcs_colname)]
fcs_raw

# Replace problematic characters 
panel$Antigen <- gsub("-", "_", panel$Antigen)
panel$fcs_colname <- gsub("-", "_", panel$fcs_colname)


panel_fcs <- pData(parameters(fcs_raw[[1]]))
head(panel_fcs)


# Replace problematic characters 
panel_fcs$name <- gsub("-", "_", panel_fcs$name)


# Lineage markers
(lineage_markers <- panel$Antigen[panel$Lineage == 1])

# Functional markers
(functional_markers <- panel$Antigen[panel$Functional == 1])

# Unused markers
(unused_markers <- panel$Antigen[panel$Unused == 1])


# Spot checks
all(lineage_markers %in% panel_fcs$name)

all(functional_markers %in% panel_fcs$name)

all(unused_markers %in% panel_fcs$name)


### Data Transformation

## arcsinh transformation and column subsetting
fcs <- fsApply(fcs_raw, function(x, cofactor = 250){
  colnames(x) <- panel$Antigen
  expr <- exprs(x)
  expr <- asinh(expr[, c(lineage_markers, functional_markers, unused_markers)] / cofactor)
  exprs(x) <- expr
  x
})
fcs


## Extract expression
expr <- fsApply(fcs, exprs)
dim(expr)

## Transformation scaling for visualisation
rng <- colQuantiles(expr, probs = c(0.01, 0.99))
expr01 <- t((t(expr) - rng[, 1]) / (rng[, 2] - rng[, 1]))
expr01[expr01 < 0] <- 0
expr01[expr01 > 1] <- 1



### Diagnostic plots

## Generate sample IDs corresponding to each cell in the `expr` matrix
sample_ids <- rep(md$sample_id, fsApply(fcs_raw, nrow))


# Plot histograms aml vs nbm lineage markers
ggdf <- data.frame(sample_id = sample_ids, expr [, lineage_markers])
ggdf <- melt(ggdf, id.var = "sample_id", 
             value.name = "expression", variable.name = "antigen")
mm <- match(ggdf$sample_id, md$sample_id)
ggdf$condition <- md$condition[mm]


histograms<- ggplot(ggdf, aes(x = expression, color = condition, group = sample_id, y= ..scaled..)) +
  geom_density() +
  facet_wrap(~ antigen, nrow = 4) +
  theme_bw() +
  theme(strip.background = element_blank())+
  theme(axis.text.x = element_text(angle = 0, hjust = 1), 
        strip.text = element_text(size = 7), 
        axis.text = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()) +
  guides(color = guide_legend(ncol = 1)) +
  scale_color_manual(values = color_conditions)
histograms + scale_x_flowjo_biexp(maxValue = 262144, widthBasis = -500, pos = 4.5, neg = 0, equal.space = FALSE)


# Get the median expression per sample
expr_median_sample_tbl <- data.frame(sample_id = sample_ids, expr) %>%
  group_by(sample_id) %>% 
  summarize_all(list(median))

###  Cell population identification with FlowSOM and ConsensusClusterPlus
fsom <- ReadInput(fcs, transform = FALSE, scale = FALSE)
set.seed(1234)
som <- BuildSOM(fsom, colsToUse = lineage_markers)

## Metaclustering into clusters with ConsensusClusterPlus
codes <- som$map$codes
plot_outdir <- "consensus_plots"
nmc <- 40

mc <- ConsensusClusterPlus(t(codes), maxK = nmc, reps = 100, 
                           pItem = 0.9, pFeature = 1, title = plot_outdir, plot = "png", 
                           clusterAlg = "hc", innerLinkage = "average", finalLinkage = "average", 
                           distance = "euclidean", seed = 1234)

## Get cluster ids for each cell
code_clustering1 <- mc[[nmc]]$consensusClass
cell_clustering1 <- code_clustering1[som$map$mapping[,1]]

color_clusters <- c("#DC050C", "#FB8072", "#1965B0", "#7BAFDE", "#882E72", "olivedrab",
                    "#B17BA6", "#FF7F00", "#FDB462", "#E7298A", "#E78AC3", "purple1",
                    "#33A02C", "#B2DF8A", "#55A1B1", "#8DD3C7", "#A6761D", "pink4", "thistle3", 
                    "#E6AB02", "#7570B3", "#BEAED4", "#666666", "#999999", "red3", "khaki3" ,
                    "#aa8282", "#d4b7b7", "#8600bf", "#ba5ce3", "#808000", "skyblue2", "honeydew1",
                    "#aeae5c", "#1e90ff", "#00bfff", "#56ff0d", "#ffff00", "turquoise1", "peru")



### Plot heatmap for lineage markers clusters


plot_clustering_heatmap_wrapper <- function(expr, expr01, 
                                            cell_clustering, color_clusters, cluster_merging = NULL){
  
  # Calculate the median expression
  expr_median <- data.frame(expr, cell_clustering = cell_clustering) %>%
    group_by(cell_clustering) %>% 
    summarize_all(funs(median))
  expr01_median <- data.frame(expr01, cell_clustering = cell_clustering) %>%
    group_by(cell_clustering) %>% 
    summarize_all(funs(median))
  
  # Calculate cluster frequencies
  clustering_table <- as.numeric(table(cell_clustering))
  
  # This clustering is based on the markers that were used for the main clustering
  d <- dist(expr_median[, colnames(expr)], method = "euclidean")
  cluster_rows <- hclust(d, method = "average")
  
  expr_heat <- as.matrix(expr01_median[, colnames(expr01)])
  rownames(expr_heat) <- expr01_median$cell_clustering
  
  labels_row <- paste0(rownames(expr_heat), " (", 
                       round(clustering_table / sum(clustering_table) * 100, 2), "%)")
  labels_col <- colnames(expr_heat)
  
  # Row annotation for the heatmap
  annotation_row <- data.frame(cluster = factor(expr01_median$cell_clustering))
  rownames(annotation_row) <- rownames(expr_heat)
  
  color_clusters <- color_clusters[1:nlevels(annotation_row$cluster)]
  names(color_clusters) <- levels(annotation_row$cluster)
  annotation_colors <- list(cluster = color_clusters)
  annotation_legend <- FALSE
  
  if(!is.null(cluster_merging)){
    cluster_merging$new_cluster <- factor(cluster_merging$new_cluster)
    annotation_row$cluster_merging <- cluster_merging$new_cluster 
    color_clusters <- color_clusters[1:nlevels(cluster_merging$new_cluster)]
    names(color_clusters) <- levels(cluster_merging$new_cluster)
    annotation_colors$cluster_merging <- color_clusters
    annotation_legend <- TRUE
  }
  
  # Colors for the heatmap
  color <- colorRampPalette(rev(brewer.pal(n = 9, name = "RdYlBu")))(100)
  
  pheatmap(expr_heat, color = color, 
           cluster_cols = FALSE, cluster_rows = cluster_rows, 
           labels_col = labels_col, labels_row = labels_row, 
           display_numbers = TRUE, number_color = "black", 
           fontsize = 10, fontsize_number = 10,
           annotation_row = annotation_row, annotation_colors = annotation_colors, 
           annotation_legend = annotation_legend)
  
}

heatmap_clusters<- plot_clustering_heatmap_wrapper(expr = expr[, lineage_markers], 
                                expr01 = expr01[, lineage_markers], 
                                cell_clustering = cell_clustering1, color_clusters = color_clusters)


## Plot tSNE with lineage markers as input

## Find and skip duplicates
dups <- which(!duplicated(expr[, lineage_markers]))

## Data subsampling: create indices by sample
inds <- split(1:length(sample_ids), sample_ids)

## How many cells to downsample per-sample
tsne_ncells <- pmin(table(sample_ids), 5000)  

## Get subsampled indices
set.seed(1234)
tsne_inds <- lapply(names(inds), function(i){
  s <- sample(inds[[i]], tsne_ncells[i], replace = FALSE)
  intersect(s, dups)
})

tsne_inds <- unlist(tsne_inds)

tsne_expr <- expr[tsne_inds, lineage_markers]

## Run t-SNE
set.seed(1234)
tsne_out <- Rtsne(tsne_expr, check_duplicates = FALSE, pca = FALSE)

dr <- data.frame(tSNE1 = tsne_out$Y[, 1], tSNE2 = tsne_out$Y[, 2], 
                 expr[tsne_inds, lineage_markers])

names(dr)[1]<-"tSNE1"
names(dr)[2]<-"tSNE2"
head(dr)
dr$sample_id <- sample_ids[tsne_inds]
mm <- match(dr$sample_id, md$sample_id)
dr$condition <- md$condition[mm]
dr$cell_clustering1 <- factor(cell_clustering1[tsne_inds], levels = 1:nmc)


## Plot t-SNE colored by clusters
tsne_clusters<- ggplot(dr,  aes(x = tSNE1, y = tSNE2, color = cell_clustering1)) +
  geom_point(size = 0.5) +
  theme_bw() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())+
  scale_color_manual(values = color_clusters) +
  guides(color = guide_legend(override.aes = list(size = 4), ncol = 2))
tsne_clusters

### Manual clustering
cluster_merging1_filename <- "test_DNR_clusters.xlsx"

cluster_merging1 <- read_excel(cluster_merging1_filename)
data.frame(cluster_merging1)

## New clustering1m
mm <- match(cell_clustering1, cluster_merging1$original_cluster)
Clusters <- cluster_merging1$new_cluster[mm]

mm <- match(code_clustering1, cluster_merging1$original_cluster)
code_clustering1m <- cluster_merging1$new_cluster[mm]
dr$Clusters <- factor(Clusters[tsne_inds])

#loop for plots per cluster
clusterdata<- read_excel("test_DNR_clusters.xlsx")
names(clusterdata)

#define list of clusters
cluster_list<-clusterdata$original_cluster
table(clusterdata$original_cluster)

## Plot total clusters
gg_tsne_cl1m <- ggplot(dr,  aes(x = tSNE1, y = tSNE2, color = Clusters)) +
  geom_point(size = 0.2) +
  theme_bw() +
  theme(panel.grid.major = element_blank()) +
  theme(panel.grid.minor = element_blank()) +
  scale_color_manual(values = color_clusters) +
  guides(color = guide_legend(override.aes = list(size = 4)))
gg_tsne_cl1m


## Melt dataframe dr for plots per marker
dr_long <- melt(dr, id.vars = c("tSNE1", "tSNE2", "sample_id", "condition", "cell_clustering1", "Clusters"))
names(dr_long)[8]<-"Expr"


## tSNE landscape overlayed with marker expression
plot_dr_long <-
  dr_long %>% 
  group_by(variable) %>%
  do(
    plots = ggplot(data = .) + aes(x = tSNE1, y = tSNE2, color = Expr) +
      geom_point(size = 0.1) + 
      theme_bw()+
      theme(
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()
      )+
      scale_color_gradientn(
        colours = rev(RColorBrewer::brewer.pal(10, "Spectral")))+
      ggtitle(.$variable)
  )

# show plots
plot_dr_long$plots

plot_markers_tsne_total<-arrangeGrob(grobs=plot_dr_long$plots)
grid.arrange(plot_markers_tsne_total)


## Now clusters per condition
# create plotlist
plot_list2<-list()
for (i in cluster_list) {
  x<-subset(dr, dr$cell_clustering1==cluster_list[i])
  plot<-ggplot(x, aes(x = tSNE1, y = tSNE2, color=Clusters)) +
    geom_point(size = 0.2) +
    theme_bw() +
    ggtitle(cluster_list[i])+
    theme(panel.grid.major = element_blank()) +
    theme(panel.grid.minor = element_blank()) +
    theme(strip.background = element_blank()) +
    theme(legend.position = "none")+
    scale_color_manual(values = color_clusters) +
  facet_wrap(~condition) 
plot_list2[[i]]<-plot
}

#save in structured figure (now 8 plots on first page, numbers may be selected for each A4)
clusters_per_sample_part1<-arrangeGrob(grobs=plot_list2[1:20], ncol = 4, nrow = 5)
grid.arrange(clusters_per_sample_part1)

clusters_per_sample_part2<-arrangeGrob(grobs=plot_list2[21:40], ncol = 4, nrow = 5)
grid.arrange(clusters_per_sample_part2)


## Plot clustersize over time
dr_clustersize <- dplyr::select(dr, condition, Clusters)

clustersize_over_time <- 
  dr_clustersize %>%
  group_by(condition, Clusters) %>%
  mutate(count = n()) 
clustersize_over_time

plot_clustersize_over_time <- ggplot() +
  geom_point(clustersize_over_time, 
             mapping = aes(x = condition, y = count, color = Clusters))+
  theme_bw()+
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())+
  theme(strip.background = element_blank(),
        axis.text.x = element_text(size = 6, angle = 90)) +
  facet_wrap(~Clusters)
plot_clustersize_over_time

### Total clusters per sample
## Facet per sample
tsne_per_sample_clusters<- gg_tsne_cl1m + facet_wrap(~ condition) + theme(strip.background = element_blank()) 
tsne_per_sample_clusters



## tSNE landscape overlayed with marker expression per condition
plot_dr_long_condition <-dr_long %>% group_by(variable) %>%
  do(
    plots = ggplot(data = .) + aes(x = tSNE1, y = tSNE2, color = Expr) +
      geom_point(size = 0.1) + 
      theme_bw()+
      theme(
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()
      )+
      theme(strip.background = element_blank()) +
      scale_color_gradientn(
        colours = rev(RColorBrewer::brewer.pal(10, "Spectral")))+
      ggtitle(.$variable)+
      facet_wrap(~condition)
  )

# show plots
plot_dr_long_condition$plots


## Arrange and name combined plots
plot_markers_per_condition<-arrangeGrob(grobs=plot_dr_long_condition$plots)
plots_markers_per_condition <- grid.arrange(plot_markers_per_condition)
plots_markers_per_condition



## Facet per sample
tsne_per_sample<- gg_tsne_cl1m + facet_wrap(~ sample_id) 
tsne_per_sample

## Facet per condition
tsne_per_condition <- gg_tsne_cl1m + facet_wrap(~ condition) 
tsne_per_condition



## Manual clustering per sample
cluster_merging1_filename <- "test_DNR_samples.xlsx"

cluster_merging1 <- read_excel(cluster_merging1_filename)
data.frame(cluster_merging1)

## New clustering1m
mm <- match(cell_clustering1, cluster_merging1$original_cluster)
Clusters <- cluster_merging1$new_cluster[mm]

mm <- match(code_clustering1, cluster_merging1$original_cluster)
code_clustering1m <- cluster_merging1$new_cluster[mm]

dr$Clusters <- factor(Clusters[tsne_inds])
dr$Clusters <- factor(dr$Clusters, levels = c("Diagnosis", "Relapse", "Healthy"))

gg_tsne_cl1m_samples <- ggplot(dr,  aes(x = tSNE1, y = tSNE2, color = Clusters)) +
  geom_point(size = 0.8) +
  theme_bw() +
  theme(panel.grid.major = element_blank()) +
  theme(panel.grid.minor = element_blank(),
        axis.text.x = element_text(size = 12, color = "black"),
        axis.text.y = element_text(size = 12, color = "black")) +
  scale_color_manual(values = color_clusters) +
  guides(color = guide_legend(override.aes = list(size = 4)))
gg_tsne_cl1m_samples 
gg_tsne_cl1m_samples <-gg_tsne_cl1m_samples + scale_color_npg()
gg_tsne_cl1m_samples

## Facet per sample
tsne_per_sample_clusters_named<- gg_tsne_cl1m_samples + facet_wrap(~ condition) + 
  theme(strip.background = element_blank(),
        strip.text.x = element_text(size = 16) )
tsne_per_sample_clusters_named


### Heatmap original clusters labelled according to proposed merging
heatmap_doublylabelled_clusters <- plot_clustering_heatmap_wrapper(expr = expr[, lineage_markers],
                                expr01 = expr01[, lineage_markers], cell_clustering = cell_clustering1,
                                color_clusters = color_clusters, cluster_merging = cluster_merging1)


heatmap_manuallylabelled_clusters <- plot_clustering_heatmap_wrapper(expr = expr[, lineage_markers],
                                expr01 = expr01[, lineage_markers], cell_clustering = Clusters,
                                color_clusters = color_clusters)


### Principle component analysis between samples
dr_combined <- dr %>%
  group_by(dr$cell_clustering1) %>% 
  summarise_if(is.numeric, mean, na.rm = TRUE)
dr_combined

names(dr_combined)[1]<-"cluster"


mm3 <- match(dr_combined$cluster, cluster_merging1$original_cluster)
dr_combined$sample <- cluster_merging1$new_cluster[mm3]

data_pca_active <- dr_combined[1:40, 10:29]


res.pca <- prcomp(data_pca_active, scale = TRUE)
fviz_eig(res.pca)


pca_per_individual <- fviz_pca_ind(res.pca,
             col.ind = "cos2", # Color by the quality of representation
             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
             repel = TRUE     # Avoid text overlapping
)
pca_per_individual

pca_per_marker <- fviz_pca_var(res.pca,
             col.var = "contrib", # Color by contributions to the PC
             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
             repel = TRUE     # Avoid text overlapping
)
pca_per_marker

overlapped_pca <- fviz_pca_biplot(res.pca, repel = TRUE,
                col.var = "#2E9FDF", # Variables color
                col.ind = "#696969"  # Individuals color
)
overlapped_pca

groups <- as.factor(dr_combined$sample[1:40])
pca_per_sample <- fviz_pca_ind(res.pca,
             col.ind = groups, # color by groups
             palette = c("#FC4E07", "green", "#00AFBB",  "black", "blue"),
             addEllipses = TRUE, # Concentration ellipses
             ellipse.type = "confidence",
             legend.title = "Groups",
             repel = TRUE
             
)
pca_per_sample

pca_combined <- ggarrange(overlapped_pca, pca_per_sample, widths = c(2, 2.2))
pca_combined



### Calculate PC values 
var_coord_func <- function(loadings, comp.sdev){
  loadings*comp.sdev
}
# Compute Coordinates
#::::::::::::::::::::::::::::::::::::::::
loadings <- res.pca$rotation
sdev <- res.pca$sdev
var.coord <- t(apply(loadings, 1, var_coord_func, sdev)) 
head(var.coord[, 1:4])

# Compute Cos2
#::::::::::::::::::::::::::::::::::::::::
var.cos2 <- var.coord^2
head(var.cos2[, 1:4])

# Compute contributions
#::::::::::::::::::::::::::::::::::::::::
comp.cos2 <- apply(var.cos2, 2, sum)
contrib <- function(var.cos2, comp.cos2){var.cos2*100/comp.cos2}
var.contrib <- t(apply(var.cos2,1, contrib, comp.cos2))
head(var.contrib[, 1:4])

var.contrib_long <- melt(var.contrib)
var.contrib_long_PC1 <- dplyr::slice(var.contrib_long, 1:20)
var.contrib_long_PC2 <- dplyr::slice(var.contrib_long, 21:40)


plot_ranking_pc1 <- ggplot() +
  geom_bar(var.contrib_long_PC1, mapping = aes(x = reorder(Var1, -value), 
                                               y = value),
           stat = "identity",
           color = "black")+
  theme_bw()+
  ylab("Contribution")+
  xlab("Marker")+
  theme(axis.text.x = element_text(color = "black", size = 12, angle = 45, vjust = 0.6),
        axis.text.y = element_text(color = "black", size = 12),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = "none")
plot_ranking_pc1

plot_ranking_pc2 <- ggplot() +
  geom_bar(var.contrib_long_PC2, mapping = aes(x = reorder(Var1, -value), 
                                               y = value),
           stat = "identity",
           color = "black")+
  theme_bw()+
  ylab("Contribution")+
  xlab("Marker")+
  theme(axis.text.x = element_text(color = "black", size = 12, angle = 45, vjust = 0.6),
        axis.text.y = element_text(color = "black", size = 12),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = "none")
plot_ranking_pc2



ggsave("NoBB_test - PCA AML - combined healthy.svg", pca_combined, 
       width = 10, height = 4)
ggsave("NoBB_test - PCA AML - PC1 ranked healthy.svg", plot_ranking_pc1, 
       width = 10, height = 6)
ggsave("NoBB_test - PCA AML - PC2 ranked healthy.svg", plot_ranking_pc2, 
       width = 10, height = 6)



ggsave("RMs_test- Histograms expression.svg", histograms, width = 10, height = 6)
ggsave("RMs_test - Heatmap total.svg", heatmap_clusters, width = 12, height = 8)
ggsave("RMs_test - tSNE clusters total.pdf", tsne_clusters, width = 10, height = 8)
ggsave("RMs_test - tSNE per sample.pdf", tsne_per_sample_clusters_named, 
       width = 10, height = 3, dpi = 300)
ggsave("RMs_test - tSNE per sample - expression.png", plots_markers_per_condition, 
       width = 30, height = 15, dpi = 300)

ggsave("RMs_test - PCA AML - PC1 ranked healthy.svg", plot_ranking_pc1, 
       width = 10, height = 6)
ggsave("RMs_test - PCA AML - PC2 ranked healthy.svg", plot_ranking_pc2, 
       width = 10, height = 6)
ggsave("RMs_test - heatmap labelled clusters.svg", heatmap_manuallylabelled_clusters, 
       width = 15, height = 3)








